{% from "macros.jinja2" import htmx_title, sync_notice %}
{{ sync_notice(sync_info) }}

    <div class="content">

        <h3>Calculator</h3>

        <p>
            The network difficulty is constantly changing, so the calculation below cannot be used as earning prediction.
            <br>
            "Average credits per day" assumes {{ avg_reward | format_aleo_credit | safe }} credits per solution on average<span class="sup">*</span>.
        </p>

        <form action="#">
            <div class="grid-x grid-padding-x">
                <div class="cell small-2">
                    <label for="proof_target_input" class="text-right middle">Proof target: </label>
                </div>
                <div class="cell small-2">
                    <div class="input-group">
                        <input class="input-group-field" id="proof_target_input" type="number" name="pt" placeholder="" value="{{ proof_target }}" min="134217728">
                    </div>
                </div>
            </div>
            <div class="grid-x grid-padding-x">
                <div class="cell small-2">
                    <label for="proof_input" class="text-right middle">Prover solution rate: </label>
                </div>
                <div class="cell small-2">
                    <div class="input-group">
                        <input class="input-group-field" id="proof_input" type="number" name="ps" placeholder="">
                        <span class="input-group-label">s/s</span>
                    </div>
                </div>
            </div>
            <div class="grid-x grid-padding-x">
                <div class="cell small-3 small-offset-2">
                    <button class="button" value="Calculate" onclick="calculate(event)">Calculate</button>
                </div>
            </div>
        </form>
        <p>
            Time to find a solution (dd:hh:mm:ss):
            <br> <span id="result"></span><br>
        </p>
        <br>
        <p class="note">
            * Live data calculated from last 10,000 solutions submitted to the network.
        </p>
    </div>

<script>
    function sec_to_human(sec) {
        const days = Math.floor(sec / 86400);
        const hours = Math.floor((sec - (days * 86400)) / 3600);
        const minutes = Math.floor((sec - (days * 86400) - (hours * 3600)) / 60);
        const seconds = Math.floor(sec % 60);
        if (sec < 3600) {
            return (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds)
        } else if (sec < 86400) {
            return (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds)
        } else {
            return days + ":" + (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds)
        }
    }

    function calculate(e) {
        e.preventDefault();
        const ps = parseFloat(document.getElementById("proof_input").value)
        const proof_target = parseInt(document.getElementById("proof_target_input").value)
      if (isNaN(ps) || isNaN(proof_target)) {
        alert("Invalid input")
        return
      }
      if (proof_target < 134217728) {
        alert("Proof target is less than network minimum target (134217728)")
        return
      }
        const result = document.getElementById("result")
        const average = sec_to_human(proof_target / ps)
        const daily = {{ avg_reward }} / 1000000 * (86400 / (proof_target / ps))

        const p_inv = 1 - (1 / proof_target)
        let cp = 1
        let lower = 0.223142603 * proof_target
        let upper = 1.609434172 * proof_target
        /*for (let n = 0; n < weight * 3; n++) {
            cp *= p_inv
            if (lower === 0 && cp < 0.8) {
                lower = n
            }
            if (cp < 0.2) {
                upper = n
                break
            }
        }*/
        const lower_time = sec_to_human(lower / ps)
        const upper_time = sec_to_human(upper / ps)

        result.innerHTML = `Average: ${average}<br> CDF [0.2, 0.8]: ${lower_time} - ${upper_time} <br>
Average credits per day: ${daily.toFixed(6)}`
    }
</script>

{{ htmx_title(request, "Proving Calculator") }}