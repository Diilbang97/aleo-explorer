{% from "macros.jinja2" import data_line, sub_data_line, sub_data_line_safe, state_label, htmx_title, sync_notice %}
{{ sync_notice(sync_info) }}

    <div class="content" hx-boost="true" hx-target="#htmx-body" hx-swap="innerHTML show:no" hx-push-url="true">
        <div class="header">
            <h3>Transition {{ ts_id_trunc }}</h3>
        </div>

        <div class="data">
        {% call data_line("Transition ID") %}
            <span class="mono">{{ ts_id }}</span>
        {% endcall %}
        {% call data_line("Transaction") %}
            <span class="mono"><a href="/transaction?id={{ transaction_id }}">{{ transaction_id }}</a></span>
        {% endcall %}
        {% call data_line("State") %}
            {{ state_label(state) }}
        {% endcall %}
        {% call data_line("Program ID") %}
            <span class="mono" id="program-id"><a href="/program?id={{ program_id }}">{{ program_id }}</a></span>
        {% endcall %}
        {% call data_line("Function name") %}
            <span class="mono" id="function-name">{{ function_name }}</span>
        {% endcall %}
        {% call data_line("Transition public key") %}
            <span class="mono" id="tpk">{{ tpk }}</span>
        {% endcall %}
        {% call data_line("Transition commitment") %}
            <span class="mono">{{ tcm }}</span>
        {% endcall %}
        </div>

        <div class="data">
            <button data-open="wallet-method" class="button primary" id="wallet-connect-button" style="display: none">Connect Wallet</button>
            <span id="wallet-connect-text"></span>
            <h4>Function call</h4>
            {% call data_line("Function signature") %}
                <span class="mono">{{ function_signature }}</span>
            {% endcall %}
            <br>
            <div class="grid-x grid-margin-x">
                <div class="cell small-12 medium-6" id="inputs">
                {% for input in inputs %}
                    <h5>Input #{{ loop.index }}</h5>
                    {% call data_line("Type") %}
                        {{ input.type }} <span class="mono">{{ function_definition["input"][loop.index0] }}</span>
                    {% endcall %}
                    {% if input.type == "Public" %}
                        {% call data_line("Plaintext") %}
                            <span class="mono">{{ input.plaintext }}</span>
                        {% endcall %}
                    {% elif input.type == "Private" %}
                        {% call data_line("Ciphertext") %}
                            <advanced-link scope="transition" object="{{ ts_id }}" type="input_private" index="{{ loop.index0 }}">
                                <span class="mono ciphertext" data-index="{{ loop.index0 }}">{{ input.ciphertext }}</span>
                            </advanced-link>
                        {% endcall %}
                    {% elif input.type == "Record" %}
                        {% call data_line("Serial number") %}
                            <span class="mono">{{ input.serial_number }}</span>
                        {% endcall %}
                        {% call data_line("Tag") %}
                            <span class="mono">{{ input.tag }}</span>
                        {% endcall %}
                    {% elif input.type == "External record" %}
                        {% call data_line("Commitment") %}
                            <span class="mono">{{ input.commitment }}</span>
                        {% endcall %}
                    {% endif %}
                    <br>
                {% endfor %}
                {% set input_count = inputs | length %}
                </div>
                <div class="cell small-12 medium-6" id="outputs">
                    {% for output in outputs %}
                        {% set outer_loop = loop %}
                        <h5>Output #{{ loop.index }}</h5>
                        {% call data_line("Type") %}
                            {{ output.type }} <span class="mono">{{ function_definition["output"][loop.index0] }}</span>
                        {% endcall %}
                        {% if output.type == "Public" %}
                            {% call data_line("Plaintext") %}
                                <span class="mono">{{ output.plaintext }}</span>
                            {% endcall %}
                        {% elif output.type == "Private" %}
                            {% call data_line("Ciphertext") %}
                                <advanced-link scope="transition" object="{{ ts_id }}" type="output_private" index="{{ loop.index0 }}">
                                    <span class="mono ciphertext" data-index="{{ loop.index0 + input_count }}">{{ output.ciphertext }}</span>
                                </advanced-link>
                            {% endcall %}
                        {% elif output.type == "Record" %}
                            <span class="record">
                                {% call data_line("Commitment") %}
                                    <span class="mono">{{ output.commitment }}</span>
                                {% endcall %}
                                {% call data_line("Record data") %}
                                    <span class="mono record-data">{{ output.record }}</span>
                                {% endcall %}
                                {% call sub_data_line_safe('<span class="mono">owner</span>') %}
                                    <advanced-link scope="transition" object="{{ ts_id }}" type="output_record" index="{{ loop.index0 }}" field="owner">
                                        <span class="mono record-field">{{ output.record_data.owner }}</span>
                                    </advanced-link>
                                {% endcall %}
                                {% for identifier, entry in output.record_data.data %}
                                    {% call sub_data_line_safe('<span class="mono">' + (identifier | string) + "</span>") %}
                                        <advanced-link scope="transition" object="{{ ts_id }}" type="output_record" index="{{ outer_loop.index0 }}" field="{{ identifier }}">
                                            <span class="mono record-field">{{ entry }}</span>
                                        </advanced-link>
                                    {% endcall %}
                                {% endfor %}
                            </span>
                        {% elif output.type == "External record" %}
                            {% call data_line("Commitment") %}
                                <span class="mono">{{ output.commitment }}</span>
                            {% endcall %}
                        {% elif output.type == "Future" %}
                            {% call data_line("Future") %}
                                <span class="mono">{{ output.future.program_id }}/{{ output.future.function_name }}(...)</span>
                            {% endcall %}
                        {% endif %}
                        <br>
                    {% endfor %}
                </div>
            </div>



        {% for input in finalizes %}
            <h5>Finalize input #{{ loop.index }}</h5>
            {% call data_line(input.type) %}
                <span class="mono">{% if input.struct_type %}struct {{ input.struct_type }} {% endif %}{{ input.value }}</span>
            {% endcall %}
            <br>
        {% endfor %}
        </div>

    </div>

    <script id="content-script" hx-swap-oob="true" async>
        (() => {
            const button = document.getElementById("wallet-connect-button")
            const text = document.getElementById("wallet-connect-text")
            let wallet = null
            if (window.leoWallet !== undefined) {
                button.style.display = ""
                wallet = window.leoWallet
            }

            button.addEventListener("click", connect)

            let connected = false

            async function connect(e) {
                e.preventDefault()
                if (connected) {
                    e.stopPropagation()
                    await wallet.disconnect()
                    button.className = "button primary"
                    button.innerText = "Connect Wallet"
                    const records = document.getElementsByClassName("record-data")
                    for (const re of records) {
                        for (const c of re.children) {
                            re.removeChild(c)
                        }
                    }
                    const ciphertexts = document.getElementsByClassName("ciphertext")
                    for (const ct of ciphertexts) {
                        for (const c of ct.children) {
                            ct.removeChild(c)
                        }
                    }
                    text.innerText = ""
                    connected = false
                    return
                }
                try {
                    await wallet.connect("AUTO_DECRYPT", "testnet3")
                } catch (e) {
                    button.className = "button alert"
                    button.innerText = "Connect failed"
                    text.innerText = e
                }
                if (wallet.publicKey) {
                    connected = true
                    button.className = "button success"
                    button.disabled = true
                    const address = wallet.publicKey
                    button.innerHTML = `Connected to address <span class="mono">${address.substring(0, 9) + "..." + address.substring(address.length - 6)}</span>`
                    text.innerText = "Trying to decrypt all ciphertexts..."
                    const tpk = document.getElementById("tpk").innerText
                    const program_name = document.getElementById("program-id").innerText
                    const function_name = document.getElementById("function-name").innerText
                    const ciphertexts = document.getElementsByClassName("ciphertext")
                    let ciphertext_counter = 0
                    for (const c of ciphertexts) {
                        try {
                            const index = parseInt(c.dataset.index)
                            const plaintext = await wallet.decrypt(c.innerText, tpk, program_name, function_name, index)
                            const element = document.createElement("span")
                            element.className = "decrypted"
                            element.innerHTML = `<br>${plaintext.text}`
                            c.appendChild(element)
                            ciphertext_counter += 1
                        } catch (e) {
                        }
                    }
                    text.innerText = "Trying to decrypt all records..."
                    const records = document.getElementsByClassName("record")
                    let record_counter = 0
                    for (const re of records) {
                        const r = re.getElementsByClassName("record-data")[0]
                        try {
                            const plaintext = await wallet.decrypt(r.innerHTML)
                            const element = document.createElement("span")
                            element.className = "decrypted"
                            element.innerHTML = `<br>${plaintext.text.replaceAll("\n", "<br>").replaceAll(" ", "&nbsp;")}`
                            r.appendChild(element)
                            record_counter++
                        } catch (e) {
                        }
                    }
                    if (record_counter > 0 || ciphertext_counter > 0) {
                        let english
                        if (record_counter === 1) {
                            english = "record"
                        } else {
                            english = "records"
                        }
                        let english2
                        if (ciphertext_counter === 1) {
                            english2 = "ciphertext"
                        } else {
                            english2 = "ciphertexts"
                        }
                        text.innerText = `Decrypted ${record_counter} ${english} and ${ciphertext_counter} ${english2}.`
                    } else {
                        text.innerText = "No record or ciphertext could be decrypted."
                    }
                    button.disabled = false
                } else {
                    button.className = "button alert"
                }
            }
        })()
    </script>

{{ htmx_title(request, "Transition " ~ ts_id_trunc) }}