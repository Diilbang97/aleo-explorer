{% extends "base.jinja2" %}

{% block title %}Transition {{ ts_id_trunc }} - Haruka's Aleo Explorer{% endblock %}

{% block head %}

    <style>

        .data {
            margin: 20px 4px;
        }

        #wallet-connect-button {
            margin-bottom: 0;
        }

        #wallet-connect-text {
            margin-left: 8px;
        }

    </style>

{% endblock %}

{% from "macros.jinja2" import data_line, sub_data_line, sub_data_line_safe, state_label %}

{% block content %}

    <div class="content">
        <div class="header">
            <h3>Transition {{ ts_id_trunc }}</h3>
        </div>

        <div class="data">
        {% call data_line("Transition ID") %}
            <span class="mono">{{ ts_id }}</span>
        {% endcall %}
        {% call data_line("Transaction") %}
            <span class="mono"><a href="/transaction?id={{ transaction_id }}">{{ transaction_id }}</a></span>
        {% endcall %}
        {% call data_line("State") %}
            {{ state_label(state) }}
        {% endcall %}
        {% call data_line("Program ID") %}
            {% if program_id | string == "credits.aleo" %}
                <span class="mono">{{ program_id }}</span>
            {% else %}
                <span class="mono"><a href="/program?id={{ program_id }}">{{ program_id }}</a></span>
            {% endif %}
        {% endcall %}
        {% call data_line("Function name") %}
            <span class="mono">{{ function_name }}</span>
        {% endcall %}
        {% call data_line("Transition public key") %}
            <span class="mono">{{ tpk }}</span>
        {% endcall %}
        {% call data_line("Transition commitment") %}
            <span class="mono">{{ tcm }}</span>
        {% endcall %}
        {% call data_line("Proof") %}
            <advanced-link scope="transition" object="{{ ts_id }}" type="proof">
                <span class="mono">{{ proof_trunc }}</span>
            </advanced-link>
        {% endcall %}
        </div>

        <div class="data">
            <a data-open="wallet-method" class="button primary" id="wallet-connect-button" style="display: none">Connect Wallet</a>
            <span id="wallet-connect-text"></span>
            <h4>Function call</h4>
            {% call data_line("Function signature") %}
                <span class="mono">{{ function_signature }}</span>
            {% endcall %}
            <br>
        {% for input in inputs %}
            <h5>Input #{{ loop.index }}</h5>
            {% call data_line("Type") %}
                {{ input.type }} <span class="mono">{{ function_definition["input"][loop.index0] }}</span>
            {% endcall %}
        {% if input.type == "Public" %}
            {% call data_line("Plaintext hash") %}
                <span class="mono">{{ input.plaintext_hash }}</span>
            {% endcall %}
            {% call data_line("Plaintext") %}
                <span class="mono">{{ input.plaintext }}</span>
            {% endcall %}
        {% elif input.type == "Private" %}
            {% call data_line("Ciphertext hash") %}
                <span class="mono">{{ input.ciphertext_hash }}</span>
            {% endcall %}
            {% call data_line("Ciphertext") %}
                <advanced-link scope="transition" object="{{ ts_id }}" type="input_private" index="{{ loop.index0 }}">
                    <span class="mono">{{ input.ciphertext }}</span>
                </advanced-link>
            {% endcall %}
        {% elif input.type == "Record" %}
            {% call data_line("Serial number") %}
                <span class="mono">{{ input.serial_number }}</span>
            {% endcall %}
            {% call data_line("Tag") %}
                <span class="mono">{{ input.tag }}</span>
            {% endcall %}
        {% elif input.type == "External record" %}
            {% call data_line("Commitment") %}
                <span class="mono">{{ input.commitment }}</span>
            {% endcall %}
        {% endif %}
            <br>
        {% endfor %}
        {% for output in outputs %}
            {% set outer_loop = loop %}
            <h5>Output #{{ loop.index }}</h5>
            {% call data_line("Type") %}
                {{ output.type }} <span class="mono">{{ function_definition["output"][loop.index0] }}</span>
            {% endcall %}
        {% if output.type == "Public" %}
            {% call data_line("Plaintext hash") %}
                <span class="mono">{{ output.plaintext_hash }}</span>
            {% endcall %}
            {% call data_line("Plaintext") %}
                <span class="mono">{{ output.plaintext }}</span>
            {% endcall %}
        {% elif output.type == "Private" %}
            {% call data_line("Ciphertext hash") %}
                <span class="mono">{{ output.ciphertext_hash }}</span>
            {% endcall %}
            {% call data_line("Ciphertext") %}
                <advanced-link scope="transition" object="{{ ts_id }}" type="output_private" index="{{ loop.index0 }}">
                    <span class="mono">{{ output.ciphertext }}</span>
                </advanced-link>
            {% endcall %}
        {% elif output.type == "Record" %}
            {% call data_line("Commitment") %}
                <span class="mono">{{ output.commitment }}</span>
            {% endcall %}
            {% call data_line("Checksum") %}
                <span class="mono">{{ output.checksum }}</span>
            {% endcall %}
            {% call data_line("Record data") %}
                <span class="mono record">{{ output.record }}</span>
            {% endcall %}
            {% call sub_data_line_safe('<span class="mono">owner</span>') %}
                <advanced-link scope="transition" object="{{ ts_id }}" type="output_record" index="{{ loop.index0 }}" field="owner">
                    <span class="mono">{{ output.record_data.owner }}</span>
                </advanced-link>
            {% endcall %}
            {% for identifier, entry in output.record_data.data %}
                {% call sub_data_line_safe('<span class="mono">' + (identifier | string) + "</span>") %}
                    <advanced-link scope="transition" object="{{ ts_id }}" type="output_record" index="{{ outer_loop.index0 }}" field="{{ identifier }}">
                        <span class="mono">{{ entry }}</span>
                    </advanced-link>
                {% endcall %}
            {% endfor %}
        {% elif output.type == "External record" %}
            {% call data_line("Commitment") %}
                <span class="mono">{{ output.commitment }}</span>
            {% endcall %}
        {% endif %}
            <br>
        {% endfor %}
        {% for input in finalizes %}
            <h5>Finalize input #{{ loop.index }}</h5>
            {% call data_line("Type") %}
                <span class="mono">{{ function_definition["finalize"][loop.index0] }}</span>
            {% endcall %}
            {% call data_line("Plaintext") %}
                <span class="mono">{{ input }}</span>
            {% endcall %}
            <br>
        {% endfor %}
        </div>

        <div class="reveal" id="wallet-method" data-reveal>
            <h3>Choose connect method</h3>

            <p>
                As a temporary workaround, you can let the explorer acquire your address's view key in order to decrypt
                inputs and outputs. This is inherently less secure as the key will leave the isolated environment of the
                wallet. The explorer will not store the key nor send it to anywhere else; the view key will only be used
                to decrypt the individual ciphertexts.
            </p>
            <p>
                You can also connect the wallet in the normal and safe way, but currently you can only decrypt records.
            </p>

            <div class="button-group">
                <button class="button primary" data-close id="wallet-connect-normal">Safe method</button>
                <button class="button secondary" data-close id="wallet-connect-unsafe">Unsafe method</button>
            </div>

            <button class="close-button" data-close aria-label="Close reveal" type="button">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

    </div>

    <script src="static/leo_wallet.js"></script>
    <script type="module">
        import {init, WASI} from 'https://cdn.jsdelivr.net/npm/@wasmer/wasi@1.2.2/+esm'

        await init()

        const button = document.getElementById("wallet-connect-button")
        const safe_buffon = document.getElementById("wallet-connect-normal")
        const unsafe_buffon = document.getElementById("wallet-connect-unsafe")
        const text = document.getElementById("wallet-connect-text")
        let wallet = null
        if (window.LeoWallet !== undefined) {
            wallet = new window.LeoWallet.LeoWalletAdapter({appName: "Haruka's Aleo Explorer"})
            if (wallet && wallet.readyState !== "NotDetected") {
                button.style.display = ""
            }
        }

        safe_buffon.addEventListener("click", connect)
        unsafe_buffon.addEventListener("click", connect_unsafe)

        async function disconnect(e) {
            if (wallet.connected) {
                e.stopPropagation()
                await wallet.disconnect()
                button.className = "button primary"
                button.innerText = "Connect Wallet"
                const records = document.getElementsByClassName("record")
                for (const re of records) {
                    for (const c of re.children) {
                        re.removeChild(c)
                    }
                }
                text.innerText = ""
                button.removeEventListener("click", disconnect)
            }
        }

        async function connect_unsafe(e) {
            e.preventDefault()
            try {
                await wallet.connect(window.AleoWalletBase.DecryptPermission.ViewKeyAccess, window.AleoWalletBase.WalletAdapterNetwork.Testnet)
            } catch (e) {
                button.className = "button alert"
                button.innerText = "Connect failed"
                text.innerText = e
            }
            if (wallet.connected) {
                button.addEventListener("click", disconnect)
                button.className = "button success"
                const address = wallet.publicKey
                button.innerHTML = `Connected to address <span class="mono">${address.substring(0, 9) + "..." + address.substring(address.length - 6)}</span>`
                text.innerText = "Trying to decrypt all ciphertexts..."

                const wasi = new WASI({})
                const wasm = await fetch("static/decrypt.wasm")
                const module = await WebAssembly.compileStreaming(wasm)
                const imports = wasi.getImports(module)
                const instance = await WebAssembly.instantiate(module, imports)
                console.log(instance)

            } else {
                button.className = "button alert"
            }
        }

        async function connect(e) {
            e.preventDefault()
            try {
                await wallet.connect(window.AleoWalletBase.DecryptPermission.AutoDecrypt, window.AleoWalletBase.WalletAdapterNetwork.Testnet)
            } catch (e) {
                button.className = "button alert"
                button.innerText = "Connect failed"
                text.innerText = e
            }
            if (wallet.connected) {
                button.addEventListener("click", disconnect)
                button.className = "button success"
                const address = wallet.publicKey
                button.innerHTML = `Connected to address <span class="mono">${address.substring(0, 9) + "..." + address.substring(address.length - 6)}</span>`
                text.innerText = "Trying to decrypt all records..."
                const records = document.getElementsByClassName("record")
                let counter = 0
                for (const re of records) {
                    console.log(re.innerHTML)
                    console.log(re.children)
                    try {
                        const plaintext = await wallet.decrypt(re.innerHTML)
                        const element = document.createElement("span")
                        element.innerHTML = `<br>${plaintext.replaceAll("\n", "<br>").replaceAll(" ", "&nbsp;")}`
                        re.appendChild(element)
                        counter++
                    } catch (e) {}
                }
                if (counter > 0) {
                    let english
                    if (counter === 1) {
                        english = "record"
                    } else {
                        english = "records"
                    }
                    text.innerText = `Decrypted ${counter} ${english}.`
                } else {
                    text.innerText = "No record could be decrypted."
                }
            } else {
                button.className = "button alert"
            }
        }
    </script>
{% endblock %}